steps "Temp create artifact" {

    actions "Temp create artifact" {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                New-OctopusArtifact -Path "C:\temp\UpgradeReport.html" -Name "UpgradeReport.html"
                
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }

        worker_pool_id_or_name = "Database Worker Pool"
    }
}

steps "Confirm deployment" {

    actions "Confirm deployment" {
        action_type = "Octopus.Manual"
        environments = ["Production", "Stage"]
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "False"
            Octopus.Action.Manual.Instructions = "Confirm you want to deploy this!"
            Octopus.Action.Manual.ResponsibleTeamIds = "Teams-2"
        }

    }
}

steps "Create Database If It Doesn't Exist" {

    actions "Create Database If It Doesn't Exist" {
        properties = {
            createCommandTimeout = "30"
            createDatabaseName = "#{DatabaseName}"
            createSqlLoginPasswordWhoHasRights = "#{SQLAdminPassword}"
            createSqlLoginUserWhoHasCreateUserRights = "#{SQLAdminUser}"
            createSqlServer = "#{SQLServer}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-1"
            Octopus.Action.Template.Version = "3"
        }

        worker_pool_id_or_name = "Database Worker Pool"
    }
}

steps "Add User to Database If Needed" {

    actions "Add User to Database If Needed" {
        properties = {
            createDatabaseName = "#{DatabaseName}"
            createSqlLogin = "#{SQLUser}"
            createSqlLoginPasswordWhoHasRights = "#{SQLAdminPassword}"
            createSqlLoginUserWhoHasCreateUserRights = "#{SQLAdminUser}"
            createSqlServer = "#{SQLServer}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-21"
            Octopus.Action.Template.Version = "2"
        }

        worker_pool_id_or_name = "Database Worker Pool"
    }
}

steps "Add User To Role" {

    actions "Add User To Role" {
        properties = {
            createDatabaseName = "#{DatabaseName}"
            createRoleName = "db_owner"
            createSqlLogin = "#{SQLUser}"
            createSqlLoginPasswordWhoHasRights = "#{SQLAdminPassword}"
            createSqlLoginUserWhoHasCreateUserRights = "#{SQLAdminUser}"
            createSqlServer = "#{SQLServer}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-22"
            Octopus.Action.Template.Version = "2"
        }

        worker_pool_id_or_name = "Database Worker Pool"
    }
}

steps "Generate DB Delta Report for Stage Environment" {

    actions "Generate DB Delta Report for Stage Environment" {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $packagePath = $OctopusParameters["Octopus.Action.Package[RandomQuotes].ExtractedPath"]
                $connectionString = $OctopusParameters["DefaultConnection"]
                $reportPath = $OctopusParameters["HtmlReport.Location"]
                $environmentName = $OctopusParameters["Octopus.Environment.Name"]
                
                $exeToRun = "$packagePath/RandomQuotes.DbUp.exe"
                $generatedReport = "$reportPath/UpgradeReport.html"
                
                if ((test-path $reportPath) -eq $false){
                	Write-Highlight "Creating new folder directory"
                	New-Item $reportPath -ItemType "directory"
                }
                
                & $exeToRun --connectionString="$($connectionString)" --previewReportPath="$($reportPath)"
                Write-Highlight "Ran report preview"
                #New-OctopusArtifact -Path "$generatedReport" -Name "$environmentName.UpgradeReport.html"
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }

        worker_pool_id_or_name = "Database Worker Pool"

        packages "RandomQuotes" {
            acquisition_location = "Server"
            feed_id_or_name = "Octopus Server (built-in)"
            package_id = "RandomQuotes"
            properties = {
                Extract = "True"
                SelectionMode = "immediate"
            }

        }
    }
}

steps "DBA Review and Approval" {

    actions "DBA Review and Approval" {
        action_type = "Octopus.Manual"
        environments = ["Stage"]
        notes = "DBA review delta change reports and approve changes."
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "False"
            Octopus.Action.Manual.Instructions = "Review the database delta report and approve changes."
            Octopus.Action.Manual.ResponsibleTeamIds = "Teams-1"
        }

    }
}

steps "Deploy Database Changes" {

    actions "Deploy Database Changes" {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $packagePath = $OctopusParameters["Octopus.Action.Package[RandomQuotes].ExtractedPath"]
                $connectionString = $OctopusParameters["DefaultConnection"]
                
                $exeToRun = "$packagePath/RandomQuotes.DbUp.exe"
                
                # How you run this .NET core app
                & $exeToRun --connectionString="$($connectionString)"
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }

        worker_pool_id_or_name = "Database Worker Pool"

        packages "RandomQuotes" {
            acquisition_location = "Server"
            feed_id_or_name = "Octopus Server (built-in)"
            package_id = "RandomQuotes"
            properties = {
                Extract = "True"
                SelectionMode = "immediate"
            }

        }
    }
}

steps "Deploy to IIS" {
    properties = {
        Octopus.Action.MaxParallelism = "#{DeploymentWindowSize}"
        Octopus.Action.TargetRoles = "web"
    }


    actions "Take site offline" {
        action_type = "Octopus.Script"
        environments = ["Production"]
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                Import-Module WebAdministration
                
                $directory = (Get-Website -Name 'RandomQuotes').physicalPath
                if( $directory ){
                	Write-Output "Taking site offline."
                    Copy-Item "C:\app_offline.htm" (Join-Path $directory 'app_offline.htm') -Force
                }
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }

        worker_pool_variable = ""
    }

    actions "Deploy to IIS" {
        action_type = "Octopus.IIS"
        properties = {
            Octopus.Action.EnabledFeatures = "Octopus.Features.IISWebSite,Octopus.Features.JsonConfigurationVariables,Octopus.Features.ConfigurationVariables,Octopus.Features.ConfigurationTransforms"
            Octopus.Action.IISWebSite.ApplicationPoolFrameworkVersion = "No Managed Code"
            Octopus.Action.IISWebSite.ApplicationPoolIdentityType = "ApplicationPoolIdentity"
            Octopus.Action.IISWebSite.ApplicationPoolName = "#{WebsiteName}-AppPool"
            Octopus.Action.IISWebSite.Bindings = "[{\"protocol\":\"http\",\"ipAddress\":\"*\",\"port\":\"#{PortBinding}\",\"host\":\"\",\"thumbprint\":null,\"certificateVariable\":null,\"requireSni\":\"False\",\"enabled\":\"True\"}]"
            Octopus.Action.IISWebSite.CreateOrUpdateWebSite = "True"
            Octopus.Action.IISWebSite.DeploymentType = "webSite"
            Octopus.Action.IISWebSite.EnableAnonymousAuthentication = "True"
            Octopus.Action.IISWebSite.EnableBasicAuthentication = "False"
            Octopus.Action.IISWebSite.EnableWindowsAuthentication = "True"
            Octopus.Action.IISWebSite.StartApplicationPool = "True"
            Octopus.Action.IISWebSite.StartWebSite = "True"
            Octopus.Action.IISWebSite.WebApplication.ApplicationPoolFrameworkVersion = "v4.0"
            Octopus.Action.IISWebSite.WebApplication.ApplicationPoolIdentityType = "ApplicationPoolIdentity"
            Octopus.Action.IISWebSite.WebRootType = "packageRoot"
            Octopus.Action.IISWebSite.WebSiteName = "#{WebsiteName}"
            Octopus.Action.Package.AutomaticallyRunConfigurationTransformationFiles = "True"
            Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings = "True"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "Octopus Server (built-in)"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "appsettings.json"
            Octopus.Action.Package.PackageId = "RandomQuotes"
        }

        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed_id_or_name = "Octopus Server (built-in)"
            package_id = "RandomQuotes"
            properties = {
                SelectionMode = "immediate"
            }

        }
    }
}